extension BinaryInteger{
    var digits: [Int] {
        return String(describing: self).compactMap { Int(String($0)) }
    }
}
//
//
func sumOfNumber(_ number: [Int]) -> (Int, Bool){
    let squares = number.map { $0 * $0}
    print("squares\(squares)")
    let newNumber = squares.reduce(0, +)
    print(newNumber)
    if newNumber > 1{
        return (newNumber, false)
    }else{
        return (newNumber, true)
    }

}
//
var checkDuplicate : [Int] = []

func sumOfNum(_ number: [Int]) -> Int{
    let squares = number.map { $0 * $0}
    let newNumber = squares.reduce(0, +)
    print(newNumber)
    if checkDuplicate.contains(newNumber){
        return newNumber
    }else{
        checkDuplicate.append(newNumber)
        return sumOfNum(newNumber.digits)
    }
}


func isHappy(_ n: Int) -> Bool {
    let numbers = n.digits
    let number = sumOfNum(numbers)
    if number == 1{
        return true
    }else{
        return false
    }
}

isHappy(7)
